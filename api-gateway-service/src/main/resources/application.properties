server.port=8090
spring.application.name=api-gateway
#this is equivalent to @EnableEurekaClient but in gateway service we define it in the property file
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.default-filters=TokenRelay

#so we can write the route[n].uri in lowercase instead of uppercase
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

spring.cloud.gateway.routes[0].id=product-service
spring.cloud.gateway.routes[0].uri=lb://product-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product

spring.cloud.gateway.routes[1].id=order-service
spring.cloud.gateway.routes[1].uri=lb://order-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order

eureka.instance.instance-id=${spring.application.name}-${random.uuid}


#keycloak configuration
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8180/auth/realms/microservices-realm
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-id=spring-cloud-gateway-client
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-secret=fe7a2722-2c96-45d7-a9e4-6ee9da224a43
spring.security.oauth2.client.registration.spring-cloud-gateway-client.provider=keycloak
spring.security.oauth2.client.registration.spring-cloud-gateway-client.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.spring-cloud-gateway-client.redirect-uri=http://localhost:8090/login/oauth2/code/spring-cloud-gateway-client

spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8180/auth/realms/microservices-realm/protocol/openid-connect/certs